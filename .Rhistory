base_url <- "https://www.googleapis.com/civicinfo/v2/representatives"
ans <- httr::GET(base_url, query = list(address = addres, key = google.key))
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
library(httr)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
library(httr)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
ans
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
string_data <- contect(get_req, 'text')
get_req <- httr::GET(base_url, query = list(address = address, key = google.key))
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
string_data <- content(get_req, 'text')
elected_officials <- as.dataframe(fromJson(string_data))
elected_officials <- as.data.frame(fromJson(string_data))
library(jsonlite)
elected_officials <- as.data.frame(fromJson(string_data))
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
elected_officials <- as.data.frame(fromJSON(string_data))
elected_officials <- fromJSON(string_data)
elected_officials
is.data.frame(elected_officials)
View(elected_officials)
elected_officials.offices
elected_officials[4]
offices <- data_as_json[4]
data_as_json <- fromJSON(string_data)
offices <- data_as_json[4]
officials <- data_as_json[5]
View(offices)
offices <- as.data.frame(data_as_json[4])
View(offices)
officials <- as.data.frame(data_as_json[5])
View(officials)
offices$index <- seq.int(nrow(offices))
View(offices)
officials$index <- seq.int(nrow(officials))
setwd("C:/Users/karti/Desktop/info201/a5-api-report-ktech99")
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
library(httr)
library(jsonlite)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
officials$index <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, officials.index == offices.officialIndeces)
officials["index"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, officials.index == offices.officialIndeces)
officials.index
officials[5]
officials["index"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, officials[9] == offices.officialIndeces)
officials_data <- full_join(officials, offices, officials[9] == offices[5])
officials_data <- full_join(officials, offices, by = "index")
officials["officialIndices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "officialIndices")
officials["officialIndices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "officialIndices")
officials_data <- full_join(officials, offices, by = "officialindices")
officials["officialindices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "officialindices")
View(offices)
officials_data <- full_join(officials, offices, by = "offices.officialindices")
officials["offices.officialindices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "offices.officialindices")
officials["offices.officiallndices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "offices.officiallndices")
officials_data <- full_join(officials, offices, by = "officialIndices")
officials["officialIndices"] <- seq.int(nrow(officials))
officials_data <- full_join(officials, offices, by = "officialIndices")
officials_data <- full_join(officials, offices, by = c("index" = "officialIndices"))
officials_data <- full_join(officials, offices, by = c("index" = "offices.officialIndices"))
flattened_offices <- lapply(offices, flatten)
flattened_offices <- lapply(ata_as_json[4], flatten)
flattened_offices <- lapply(data_as_json[4], flatten)
View(flattened_offices)
offices <- as.data.frame(flattened_offices)
View(offices)
View(offices)
offices
---
title: "Who Represents You?"
output:
html_document: default
css: styles.css
---
This is the stub of the .rmd file you should use to create you
representatives' overview.  Please fill in the missing part, write the
code, and delete the instructions.
# Your Elected Officials
```{r init, include=FALSE}
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
#install.packages("tidyr")
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
```
```{r address, include=FALSE}
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
```
```{r processData}
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
```
## Your Representatives
Explain briefly what and how do you do here.  Provide links to the
corresponding API-s.
Include a table that includes all the officials for the given addres.
```{r}
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(repTable)
```
## House of Representatives
Make the visualization of party affiliation of the the congressional representatives
(in the House of Representatives, _not_ the Senate) for this address.
```{r}
##
## ggplot(stateReps, aes(gender)) + ...
```
Make another visualization too.
## Pick a Particular Representative.  Insert the name here in the title
Write a paragraph where you tell her name, party, age, and twitter
link.  Find out how often she recently voted with the majority.
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
#install.packages("tidyr")
library(dplyr)
library(httr)
library(jsonlite)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(repTable)
results <- as.data.frame(vote_as_json$results$votes)
View(results)
top_date <- results[results$date][1]
top_date <- results[results$date]
top_date <- results[1,results$date]
results <- as.data.frame(vote_as_json$results$votes)
top_date <- results[1,results$date]
top_date <- results[1,date]
top_date <- results[1,]
top_date <- results[1,]$date
top_votes <- select(results, results$date == top_date)
top_votes <- select(results, results$date == as.char(top_date))
top_votes <- select(results, results$date == as.character(top_date))
top_votes <- select(results, results.date == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.character(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- select(results, as.character(date) == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.Date(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- select(results, as.Date(date) == top_date)
top_votes <- select(results, as.Date(date, format = "%m-%d-%y") == top_date)
top_votes <- select(results, as.Date(results$date, format = "%m-%d-%y") == top_date)
top_votes <- select(results, date == top_date)
top_date <- results[1,]$date
top_date
is.data.frame(top_date)
top_votes <- select(results, results[10] == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.data.frame(results[1,]$date)
top_votes <- select(results, date == top_date)
top_date <- c(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- filter(results, date == top_date)
top_votes
top_votes <- filter(results, date == top_date && (position == "Yes" || position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail"))
percentage <- majority_votes/total_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail")))
percentage <- majority_votes/total_votes
percentage
total_votes
majority_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" && result == "Pass") ))
percentage <- majority_votes/total_votes
majority_votes
filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail"))
View(top_votes)
filter(top_votes, (position == "Yes"))
filter(top_votes, (position == "Yes" && results == "No"))
filter(top_votes, (position == "Yes" && results == "Passed"))
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Pass") | (position == "No" & result == "Fail")))
majority_votes
total_votes <- nrow(top_votes)
majority_votes
filter(top_votes, (position == "Yes" & result == "Pass")
)
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
top_votes
filter(top_votes, (result == "Pass"))
filter(top_votes, (top_votes.result == "Pass"))
filter(top_votes, (top_votes$result == "Pass"))
majority_votes <- nrow(filter(top_votes, (position == "Yes" & top_votes.result == "Passed") | (position == "No" & result == "Failed")))
top_date <- results[1,]$date
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- nrow(filter(top_votes, (position == "Yes" & top_votes.result == "Passed") | (position == "No" & result == "Failed")))
percentage <- majority_votes/total_votes
percentage <- majority_votes/total_votes
percentage
majority_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Passed") | (position == "No" & result == "Failed")))
majority_votes
percentage <- majority_votes/total_votes
percentage
top_date <- results[1,]$date
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Passed") | (position == "No" & result == "Failed")))
percentage <- majority_votes/total_votes
percentage
percentage <- (majority_votes/total_votes)*100
percentage
shiny::runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
setwd("C:/Users/karti/Desktop/info201/Info201_Final_Repository")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
