1+1
2-22
780*43
3232^3434444
who are you?
you
2+22
cd "Desktop"
cd Desktop
## a2-foundational-skills
## -------------------- Set up and Defining variables --------------------
## Install and load the the `stringr` package, which has a variety of built in functions that make working
## with string variables easier.  You may read more about stringr in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
library(stringr)
## Create a numeric variable `my_age` that is equal to your age
my_age <- 19
## Create a variable `my_name` that is equal to your first name
my_name <- "Divit"
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 24 * 60
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 365 * 24
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute and print the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
seconds_in_year <- hours_in_year * 60 * 60
## How many seconds is a typical human lifetime?
human_lifespan_seconds <- 79 * seconds_in_year
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computers,
## we can safely say that your code fails :-)
age_of_universe_seconds <- 13.8 * seconds_in_year * 1000000000
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
ans <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- str_replace(my_intro, "Hello, my name is ", "Hey, I'm ")
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- tolower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurences <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(num) {
2 * num
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(num) {
num * num * num
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
movies <- c("Lethal Weapon", "Kung Fu Panda", "Taken", "Iron Man", "Entourage the Movie", "Enter the Dragon")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
indices <- c(1, 2, 3)
top_three <- top_three[indices]
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, " is a great movie!", sep = "")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- seq(500, 699)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(numbers, lower_numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
today <- as.Date("2018-10-15")
## Create a variable `winter_break` that represents the first day of winter break (Dec 15, 2018).
## Make sure to use the `as.Date` function again
winter_break <- as.Date("2018-12-15")
## Create a variable `days_to_break` that is how many days until break (hint: subtract the dates!)
days_to_break <- winter_break - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, next_bday) {
return (paste(make_introduction(name, age), "In ", as.Date(next_bday) - today, " days I'll be ", my_age + 1))
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2018-11-03")
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(remove_from) {
gsub('[0-9]+', '', remove_from)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
removed <- RemoveDigits(c("INFO 201", "Math 307", "ESRM 311", "GWSS 200"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
google_url <- "https://www.googleapis.com/civicinfo/v2/representatives"
requested_api <- httr::GET(google_url, query = list(address = address, key = google.key))
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    https://info201.github.io/dplyr.html#joins
##    http://r4ds.had.co.nz/relational-data.html
data_as_string <- content(requested_api, as = 'text')
data_as_json <- jsonlite::fromJSON(data_as_string)
office_locations <- as.data.frame(data_as_json[4])
office_locations <- unnest(office_locations, office_locations$offices.officialIndices)
colnames(office_locations)[3] <- "officialIndices"
officials <- as.data.frame(data_as_json[5])
officials["officialIndices"] <- seq.int(nrow(officials))
official_data <- full_join(officials,office_locations, by = c("officialIndices" = "officialIndices"))
address <- "Seattle, 98195"
google_url <- "https://www.googleapis.com/civicinfo/v2/representatives"
requested_api <- httr::GET(google_url, query = list(address = address, key = google.key))
library(dplyr)
library(jsonlite)
library(httr)
library(tidyr)
<<<<<<< HEAD
google.key <- "AIzaSyA717E9KTCegaoizD_vA5oaLd3wcK3ulqs"
google_url <- "https://www.googleapis.com/civicinfo/v2/representatives"
requested_api <- httr::GET(google_url, query = list(address = address, key = google.key))
data_as_string <- content(requested_api, as = 'text')
data_as_json <- jsonlite::fromJSON(data_as_string)
office_locations <- as.data.frame(data_as_json[4])
office_locations <- unnest(office_locations, office_locations$offices.officialIndices)
colnames(office_locations)[3] <- "officialIndices"
officials <- as.data.frame(data_as_json[5])
officials["officialIndices"] <- seq.int(nrow(officials))
official_data <- full_join(officials,office_locations, by = c("officialIndices" = "officialIndices"))
View(official_data)
official_data_trimmed <- select(official_data, officials.name, offices.name, officials.party, officials.emails, officials.phones, officials.photoUrl)
official_data_trimmed$officials.photoUrl <- paste0("[](", official_data$officials.photoUrl, ")")
official_data_trimmed$officials.name <- paste0("[",official_data$officials.name,"]", "(", official_data$officials.urls, ")")
colnames(official_data_trimmed) <- c("Positon", "Name", "Party", "Email", "Phone", "Photo")
kable(official_data_trimmed) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
save_kable(file = "representatives.html", self_contained = T)
install.packages(kable)
install.packages('kable')
install.packages("kableExtra")
install.packages('knitr')
library(kableExtra)
library(knitr)
colnames(official_data_trimmed) <- c("Positon", "Name", "Party", "Email", "Phone", "Photo")
kable(official_data_trimmed) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
save_kable(file = "representatives.html", self_contained = T)
library(shiny)
library(shinythemes)
ui <-  pageWithSidebar(
# App title ----
headerPanel("C.I.D (Crime Investigation Department)"),
# Sidebar panel for inputs ----
sidebarPanel(
sliderInput(
"Slider",
"Year",
value = 2014,
min = 2010,
max = 2017
),
dateRangeInput('dates', label = "Date Range",width = 380,
start = '2014-01-01', end = '2015-01-01',
min = "2013-01-01", max = "2016-08-01"
),
# create a slder-input widget for time of day selection
sliderInput('time_of_day','Time of Day', min = 0, max = 23,width = 380,
value = c(0,23), step = 1),
# create a submit-button for user explicitly confirm data input
submitButton(text = "Submit",icon =icon('filter'))
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("CrimeFrequencyPlot"), plotOutput("mapFreqencyPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
# plotOutput("ShapePlot"),
#p(textOutput("shapeCaption"))
)
)
library("dplyr")
library("ggplot2")
library("R.utils")
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
server <- function(input, output, session) {
output$CrimeFrequencyPlot <- renderPlot({
crime_grouped <- group_by(police_data, V6) %>% dplyr::filter(grepl(input$Slider,V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
ggplot(data = crime_grouped, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip() +
theme(legend.position = "none",
panel.background = element_blank(),
axis.text.y = element_text( lineheight = 15))+
labs(title = "Frequency of Crimes reported to Seattle PD")
})
output$table <- renderTable({
summary(police_data)
})
output$mapFreqencyPlot <- renderPlot({
crime_grouped <- group_by(police_data, V13, V14) %>% dplyr::filter(grepl("2015",V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
ggplot(crime_grouped) +
geom_tile(aes(
x = V14,
y = V13,
fill = freq,
size = 3
)) + scale_fill_gradient(limits=c(0, 3000), low = "white", high = "red")  + ggtitle("North America 1986 Airtemp")
})
}
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
setwd("C:/Users/Divit/Desktop/Quarter 1/Info 201/Info201_Final_Repository")
library("dplyr")
library("ggplot2")
library("R.utils")
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
server <- function(input, output, session) {
output$CrimeFrequencyPlot <- renderPlot({
crime_grouped <- group_by(police_data, V6) %>% dplyr::filter(grepl(input$Slider,V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
ggplot(data = crime_grouped, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip() +
theme(legend.position = "none",
panel.background = element_blank(),
axis.text.y = element_text( lineheight = 15))+
labs(title = "Frequency of Crimes reported to Seattle PD")
})
output$table <- renderTable({
summary(police_data)
})
output$mapFreqencyPlot <- renderPlot({
crime_grouped <- group_by(police_data, V13, V14) %>% dplyr::filter(grepl("2015",V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
ggplot(crime_grouped) +
geom_tile(aes(
x = V14,
y = V13,
fill = freq,
size = 3
)) + scale_fill_gradient(limits=c(0, 3000), low = "white", high = "red")  + ggtitle("North America 1986 Airtemp")
})
}
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
View(police_data)
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
library('ggplot2')
data_cat <- group_by(police_data, V6)
View(data_cat)
library("dplyr")
library("ggplot2")
library("R.utils")
data_2012 <- group_by(police_data, V6) %>% dplyr::filter(grepl('2012', V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
View(data_2012)
data_2013 <- group_by(police_data, V6) %>% dplyr::filter(grepl('2013', V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
library("dplyr")
library("ggplot2")
library("R.utils")
police_data  <- data.table::fread("./data/Seattle_PD_data.bz2", header = FALSE, sep=",")
data_2012 <- group_by(police_data, V6) %>% dplyr::filter(grepl('2012', V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
data_2013 <- group_by(police_data, V6) %>% dplyr::filter(grepl('2013', V8)) %>% summarise(freq = n()) %>% dplyr::filter(freq>=200)
ggplot(data = data_2012, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
plot_2012 <- ggplot(data = data_2012, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
View(plot_2012)
View(data_2013)
plot_2013 <- ggplot(data = data_2013, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
plot_2013 <- ggplot(data = data_2013, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
View(plot_2013)
plot_2012 <- ggplot(data = data_2012, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
plot_2013 <- ggplot(data = data_2013, aes(
x = V6,
y = freq,
width = .5,
fill = V6
)) +
geom_bar(stat = 'identity', position = 'dodge', width = 400) +
coord_flip()
plot(plot_2012)
plot(plot_2013)
=======
library(ggplot2)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
## insert your address here.  It does not to have quite complete.
address <- "Seattle, WA"
## Test your code with addresses in different states, see if it works
## Note that if you change the address, your code must re-load the data and re-do the tables and figures.
## Make the main computations here.  Keep the functions in a separate file(s)
## and only include the final operations here.
## You have to 'source()' your main R file(s) here:
source('process_data.R')
## You may also have to do some additional processing here
## You may want to print the table in a nice way using `knitr::kable()`
## when you have already created it.
knitr::kable(repTable)
results <- as.data.frame(vote_as_json$results$votes)
View(results)
top_date <- results[results$date][1]
top_date <- results[results$date]
top_date <- results[1,results$date]
results <- as.data.frame(vote_as_json$results$votes)
top_date <- results[1,results$date]
top_date <- results[1,date]
top_date <- results[1,]
top_date <- results[1,]$date
top_votes <- select(results, results$date == top_date)
top_votes <- select(results, results$date == as.char(top_date))
top_votes <- select(results, results$date == as.character(top_date))
top_votes <- select(results, results.date == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.character(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- select(results, as.character(date) == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.Date(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- select(results, as.Date(date) == top_date)
top_votes <- select(results, as.Date(date, format = "%m-%d-%y") == top_date)
top_votes <- select(results, as.Date(results$date, format = "%m-%d-%y") == top_date)
top_votes <- select(results, date == top_date)
top_date <- results[1,]$date
top_date
is.data.frame(top_date)
top_votes <- select(results, results[10] == top_date)
top_votes <- select(results, date == top_date)
top_date <- as.data.frame(results[1,]$date)
top_votes <- select(results, date == top_date)
top_date <- c(results[1,]$date)
top_votes <- select(results, date == top_date)
top_votes <- filter(results, date == top_date)
top_votes
top_votes <- filter(results, date == top_date && (position == "Yes" || position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail"))
percentage <- majority_votes/total_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail")))
percentage <- majority_votes/total_votes
percentage
total_votes
majority_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" && result == "Pass") ))
percentage <- majority_votes/total_votes
majority_votes
filter(top_votes, (position == "Yes" && result == "Pass") || (position == "No" && result == "Fail"))
View(top_votes)
filter(top_votes, (position == "Yes"))
filter(top_votes, (position == "Yes" && results == "No"))
filter(top_votes, (position == "Yes" && results == "Passed"))
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Pass") | (position == "No" & result == "Fail")))
majority_votes
total_votes <- nrow(top_votes)
majority_votes
filter(top_votes, (position == "Yes" & result == "Pass")
)
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
top_votes
filter(top_votes, (result == "Pass"))
filter(top_votes, (top_votes.result == "Pass"))
filter(top_votes, (top_votes$result == "Pass"))
majority_votes <- nrow(filter(top_votes, (position == "Yes" & top_votes.result == "Passed") | (position == "No" & result == "Failed")))
top_date <- results[1,]$date
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- nrow(filter(top_votes, (position == "Yes" & top_votes.result == "Passed") | (position == "No" & result == "Failed")))
percentage <- majority_votes/total_votes
percentage <- majority_votes/total_votes
percentage
majority_votes
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Passed") | (position == "No" & result == "Failed")))
majority_votes
percentage <- majority_votes/total_votes
percentage
top_date <- results[1,]$date
top_votes <- filter(results, date == top_date & (position == "Yes" | position == "No"))
total_votes <- nrow(top_votes)
majority_votes <- nrow(filter(top_votes, (position == "Yes" & result == "Passed") | (position == "No" & result == "Failed")))
percentage <- majority_votes/total_votes
percentage
percentage <- (majority_votes/total_votes)*100
percentage
shiny::runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
shiny::runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
library("ggmap")
seattle_map <-
get_stamenmap(seattle, zoom = 13, maptype = "toner-lines")
seattle <-
c(
left = -122.459694,
bottom = 47.4815352929,
right = -122.224434,
top = 47.734135
)
seattle_map <-
get_stamenmap(seattle, zoom = 13, maptype = "toner-lines")
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
runApp('C:/Users/karti/Desktop/info201/Info201_Final_Repository')
police_data  <-
data.table::fread("./data/Seattle_PD_data.bz2",
header = FALSE,
sep = ",")
setwd("C:/Users/karti/Desktop/info201/Info201_Final_Repository")
police_data  <-
data.table::fread("./data/Seattle_PD_data.bz2",
header = FALSE,
sep = ",")
View(police_data)
View(police_data)
police_data$date <- substr(police_data$V8, 1, 10)
police_data$time <- substr(police_data$V8, 12, 22)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 4d6c1eb16048d3b073430a5a45851a58a0963061
